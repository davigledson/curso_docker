# minikube start (inicia o kubernetes)
# minikube start --driver=docker (inicia o kubernetes, e escolhe o drive)
# minikube stop (para o kubernetes)

# minikube darhboard (abre o dashboard o kubernetes)
# minikube darhboard --url (pega a url do dashboard o kubernetes)

# kubectl create deployment <NOME> --image=<IMAGE>
# dessa forma o projeto estará orquestrado pelo Kubernetes

# kubectl create deployment flask-deployment --image=davigledson/flask-kub-projeto

# kubectl get pods  (lista os pods)
# kubectl describe pods (descreve os pods)

# kubectl config view (ver como está configurado)

# --- CRIANDO NOSSO SERVICE ---
# service = tipo networks
# kubectl expose deployment <nome do deployment> --type=<tipo de servico> --port=<porta>
# kubectl expose deployment flask-deployment --type=LoadBalancer --port=5000

# minikube service <nome do deployment>  (dessa forma, temos o serviço rodando no navegador)
# exemplo minikube service flask-deployment 


# ---VERIFICANDO OS NOSSOS SERVIÇOS ---
# kubectl get services (lista dos serviços )
#  kubectl describe service <nome do serviço>  /// kubectl describe service/flask-deployment   (descreve o serviço )

# --- REPLICANDO NOSSA APLICAÇÃO ---
# kubectl scale deployment/<nome do servico> --replicas=<NUMERO> (scala a aplicação) (podemos verificar no Dashboard o aumento de Pods)

# kubectl get pods (ver os pods)
# kubectl get rs (checa os status das replicas dos projetos)

# --- Diminuindo a escala --- 
# (o comando é o mesmo, porem colocamos menos réplicas e o Kubernetes faz o resto)

 # kubectl scale deployment/<nome do servico> --replicas=<NUMERO> (scala a aplicação) (podemos verificar no Dashboard o aumento de Pods)

# --- ATUALIZANDO IMAGE DO PROJETO ---
# para atualizar a imagem vamos precisar do nome do container dado na Dashboard dentro do Pod
# è também a nova imagem deve ser de uma outra versão da atual (precisamos subir uma nova tag no Hub) 

# kubectl set image deployment/<nome do servico> <nome_container>=<nova_imagem>
# EXEMPLO:  kubectl set image deployment/flask-deployment flask-kub-projeto=davigledson/flask-kub-projeto:2


# --- DESFAZER ALTERAÇÃO ---

# kubectl rollout status deployment/<nome do servico> (verifica a alteração)

# kubectl rollout undo deployment/<nome do servico> (faz o  rollback)

# kubectl delete service <nome> (deletar o serviço)
# (dessa maneira nossos Pods não terão mais a conexão externo)

# kubectl delete deployment <nome> (dessa maneira, o container não estará mais rodando)